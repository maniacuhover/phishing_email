import streamlit as st
import random
import json
import os
import requests
from datetime import datetime

# Configurare paginƒÉ
st.set_page_config(
    page_title="Vaccin Anti-Phishing AI",
    page_icon="üõ°Ô∏è",
    layout="wide"
)

# Func»õie pentru √ÆncƒÉrcarea exemplelor predefinite
@st.cache_data
def load_examples():
    try:
        with open("examples.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        # √éntoarcem o listƒÉ minimalƒÉ de tip fallback dacƒÉ fi»ôierul nu existƒÉ
        return [
            {
                "type": "Email-phishing clasic",
                "real": {
                    "subject": "Factura lunii martie de la FurnizorulTau",
                    "body": "Stimate client,\n\nVƒÉ transmitem ata»ôat factura pentru luna martie.\n\nCu stimƒÉ,\nEchipa FurnizorulTau."
                },
                "fake": {
                    "subject": "ACTIVITATE SUSPECTƒÇ pe contul tƒÉu ‚Äì VerificƒÉ ACUM",
                    "body": "Contul tƒÉu a fost compromis. Click aici http://bit.ly/secure-check pentru resetare imediatƒÉ."
                },
                "explanation": "Fals: ton de urgen»õƒÉ, link scurt, domeniu neoficial. Real: limbaj formal, ata»ôament legitim."
            },
            {
                "type": "Spear-phishing",
                "real": {
                    "subject": "√ént√¢lnirea de proiect - agenda",
                    "body": "BunƒÉ ziua,\n\nVƒÉ trimit agenda pentru √Ænt√¢lnirea noastrƒÉ de sƒÉptƒÉm√¢na viitoare.\nVƒÉ rog sƒÉ confirma»õi participarea.\n\nCu stimƒÉ,\nMaria"
                },
                "fake": {
                    "subject": "Referitor la proiectul nostru",
                    "body": "Salut,\n\nAm observat cƒÉ nu ai trimis √ÆncƒÉ documentele pentru proiectul X.\nDescarcƒÉ formularul de aici: http://docs-google.net/form »ôi trimite-l urgent.\n\nMul»õumesc,\nAndrei"
                },
                "explanation": "Fals: adresƒÉ URL suspectƒÉ (docs-google.net √Æn loc de docs.google.com), presiune de timp."
            },
            {
                "type": "FraudƒÉ bancarƒÉ",
                "real": {
                    "subject": "Informare: Noi func»õionalitƒÉ»õi √Æn aplica»õia BancaX",
                    "body": "StimatƒÉ DoamnƒÉ/Stimate Domn,\n\nVƒÉ informƒÉm cƒÉ am actualizat aplica»õia mobilƒÉ cu noi func»õionalitƒÉ»õi.\nPentru detalii, accesa»õi aplica»õia sau www.banca-x.ro.\n\nBancaX"
                },
                "fake": {
                    "subject": "URGENT: Cardul dvs. va fi blocat",
                    "body": "Stimat client,\n\nCardul dvs. va fi blocat √Æn 24h din cauza unei activitƒÉ»õi suspecte.\nPentru verificare, accesa»õi: http://banca-x.secureverify.com »ôi introduce»õi datele cardului.\n\nDepartament Securitate"
                },
                "explanation": "Fals: domeniu fals (banca-x.secureverify.com), solicitare date card, ton de urgen»õƒÉ."
            }
        ]

# Func»õie pentru generarea de emailuri folosind un model AI
def generate_emails(phishing_type):
    # VerificƒÉm dacƒÉ existƒÉ o cheie API configuratƒÉ
    api_key = os.environ.get("HF_API_KEY", st.secrets.get("HF_API_KEY", None))
    
    if not api_key:
        # SimulƒÉm generarea dacƒÉ nu avem API key (pentru demo)
        return {
            "real": {
                "subject": f"Email legitim despre {phishing_type}",
                "body": f"Acesta este un email legitim generat pentru {phishing_type}.\n\nAre un ton profesional, nu solicitƒÉ date personale »ôi folose»ôte un domeniu oficial."
            },
            "fake": {
                "subject": f"URGENT: Situa»õie de {phishing_type}!!!",
                "body": f"ATEN»öIE! Acesta este un email de phishing generat pentru {phishing_type}.\n\nAre un ton urgent, solicitƒÉ ac»õiune imediatƒÉ »ôi probabil con»õine un link suspect: http://website-fals.com"
            }
        }
    
    # DacƒÉ avem cheie API, facem cererea cƒÉtre serviciul AI
    try:
        # Prompt pentru email legitim
        prompt_real = f"""
        GenereazƒÉ un email PROFESIONAL »ôi LEGITIM rom√¢nesc pe tema "{phishing_type}".
        Email-ul trebuie sƒÉ fie autentic, sƒÉ respecte toate regulile profesionale de comunicare
        »ôi sƒÉ NU con»õinƒÉ elemente de phishing. Include subiect »ôi corp.
        """
        
        # Prompt pentru email phishing
        prompt_fake = f"""
        GenereazƒÉ un email DE PHISHING rom√¢nesc pe tema "{phishing_type}".
        Email-ul trebuie sƒÉ PARƒÇ legitim, dar sƒÉ con»õinƒÉ indicii care ar arƒÉta cƒÉ e phishing: 
        urgen»õƒÉ, link-uri suspecte, cerere de date personale, etc. Include subiect »ôi corp.
        """
        
        # Facem request-urile cƒÉtre API
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Request pentru email legitim
        response_real = requests.post(
            "https://api-inference.huggingface.co/models/meta-llama/Llama-2-70b-chat-hf",
            headers=headers,
            json={"inputs": prompt_real, "parameters": {"max_length": 300}}
        )
        
        # Request pentru email phishing
        response_fake = requests.post(
            "https://api-inference.huggingface.co/models/meta-llama/Llama-2-70b-chat-hf",
            headers=headers,
            json={"inputs": prompt_fake, "parameters": {"max_length": 300}}
        )
        
        # ProcesƒÉm rƒÉspunsurile
        if response_real.status_code == 200 and response_fake.status_code == 200:
            real_text = response_real.json()[0]["generated_text"]
            fake_text = response_fake.json()[0]["generated_text"]
            
            # Extragem subiect »ôi corp
            real_lines = real_text.split("\n")
            fake_lines = fake_text.split("\n")
            
            real_subject = next((line for line in real_lines if "subiect" in line.lower()), "Email legitim")
            fake_subject = next((line for line in fake_lines if "subiect" in line.lower()), "URGEN»öƒÇ: Ac»õiune necesarƒÉ")
            
            real_body = "\n".join(line for line in real_lines if "subiect" not in line.lower())
            fake_body = "\n".join(line for line in fake_lines if "subiect" not in line.lower())
            
            return {
                "real": {
                    "subject": real_subject.replace("Subiect:", "").strip(),
                    "body": real_body.strip()
                },
                "fake": {
                    "subject": fake_subject.replace("Subiect:", "").strip(),
                    "body": fake_body.strip()
                }
            }
        else:
            # Fallback la exemple statice
            raise Exception("API error")
            
    except Exception as e:
        st.error(f"Eroare la generarea cu AI: {str(e)}")
        # RƒÉspuns de fallback
        return {
            "real": {
                "subject": f"Email legitim despre {phishing_type}",
                "body": f"Acesta este un email legitim despre {phishing_type}.\n\nAre un ton profesional, nu solicitƒÉ date personale »ôi folose»ôte un domeniu oficial."
            },
            "fake": {
                "subject": f"URGENT: Situa»õie de {phishing_type}!!!",
                "body": f"ATEN»öIE! Acesta este un email de phishing pentru {phishing_type}.\n\nAre un ton urgent, solicitƒÉ ac»õiune imediatƒÉ »ôi probabil con»õine un link suspect: http://website-fals.com"
            }
        }

# Ini»õializare stare sesiune
if "score" not in st.session_state:
    st.session_state.score = 0
if "total" not in st.session_state:
    st.session_state.total = 0
if "examples_used" not in st.session_state:
    st.session_state.examples_used = []
if "start_time" not in st.session_state:
    st.session_state.start_time = datetime.now()
if "ai_mode" not in st.session_state:
    st.session_state.ai_mode = False

# √éncƒÉrcƒÉm exemplele
examples = load_examples()

# Interfa»õƒÉ utilizator
st.title("üõ°Ô∏è Vaccin Anti-Phishing cu AI")
st.markdown("""
#### AntreneazƒÉ-te sƒÉ recuno»ôti atacurile de phishing!
Acest quiz folose»ôte Inteligen»õa ArtificialƒÉ pentru a genera emailuri realiste »ôi te ajutƒÉ sƒÉ identifici 
mesajele frauduloase fƒÉrƒÉ sƒÉ √Æ»õi cerem nicio informa»õie personalƒÉ.
""")

# Sidebar cu scor, statistici »ôi setƒÉri
with st.sidebar:
    st.header("Statistici »ôi SetƒÉri")
    st.metric("Scor curent", f"{st.session_state.score}/{st.session_state.total}")
    if st.session_state.total > 0:
        accuracy = (st.session_state.score / st.session_state.total) * 100
        st.progress(accuracy/100, f"Acurate»õe: {accuracy:.1f}%")
    
    elapsed_time = (datetime.now() - st.session_state.start_time).total_seconds()
    minutes, seconds = divmod(int(elapsed_time), 60)
    st.info(f"Timp petrecut: {minutes}m {seconds}s")
    
    st.subheader("Mod de func»õionare")
    ai_mode = st.toggle("Folose»ôte AI pentru generare", value=st.session_state.ai_mode)
    if ai_mode != st.session_state.ai_mode:
        st.session_state.ai_mode = ai_mode
        if "current_example" in st.session_state:
            del st.session_state.current_example
    
    if st.button("ReseteazƒÉ scorul"):
        st.session_state.score = 0
        st.session_state.total = 0
        st.session_state.examples_used = []
        st.session_state.start_time = datetime.now()
        if "current_example" in st.session_state:
            del st.session_state.current_example
        st.rerun()

# Container principal
main_container = st.container()

with main_container:
    # GenerƒÉm un exemplu nou sau folosim AI pentru a genera
    if "current_example" not in st.session_state:
        # Alegem un tip aleatoriu din exemplele disponibile
        example_type = random.choice([ex["type"] for ex in examples])
        explanation = next((ex["explanation"] for ex in examples if ex["type"] == example_type), 
                         "VerificƒÉ adresa expeditorului, link-urile »ôi solicitƒÉrile de informa»õii.")
        
        if st.session_state.ai_mode:
            # Generare cu AI
            with st.spinner("Generez emailuri cu AI..."):
                generated = generate_emails(example_type)
                
                # SetƒÉm exemplul curent
                st.session_state.current_example = {
                    "type": example_type,
                    "real": generated["real"],
                    "fake": generated["fake"],
                    "explanation": explanation
                }
        else:
            # Folosim exemplul predefinit
            example = next((ex for ex in examples if ex["type"] == example_type), examples[0])
            
            # SetƒÉm exemplul curent
            st.session_state.current_example = example
        
        # PregƒÉtim lista cu douƒÉ intrƒÉri »ôi amestecƒÉm ordinea
        items = [
            {"text": f"Subiect: {st.session_state.current_example['real']['subject']}\n\n{st.session_state.current_example['real']['body']}", "is_phish": False},
            {"text": f"Subiect: {st.session_state.current_example['fake']['subject']}\n\n{st.session_state.current_example['fake']['body']}", "is_phish": True}
        ]
        random.shuffle(items)
        st.session_state.items = items
    
    # Afi»ôƒÉm tipul de phishing
    st.header(f"Tip: {st.session_state.current_example['type']}")
    
    # Buton pentru regenerare
    if st.button("GenereazƒÉ alt exemplu", use_container_width=True):
        if "current_example" in st.session_state:
            del st.session_state.current_example
        st.rerun()
    
    if st.session_state.ai_mode:
        st.info("Aceste exemple au fost generate cu ajutorul Inteligen»õei Artificiale.")
    
    col1, col2 = st.columns(2)
    
    # Afi»ôƒÉm emailurile √Æn format simplu
    with col1:
        st.subheader("Mesaj #1")
        st.text_area("", st.session_state.items[0]["text"], height=300, key="msg1", disabled=True)
    
    with col2:
        st.subheader("Mesaj #2")
        st.text_area("", st.session_state.items[1]["text"], height=300, key="msg2", disabled=True)
    
    # Sec»õiunea de decizie
    choice = st.radio("Care dintre mesaje crezi cƒÉ este phishing?", ["Mesaj #1", "Mesaj #2"])
    idx = 0 if choice == "Mesaj #1" else 1
    
    # Verificare rƒÉspuns
    if st.button("VerificƒÉ rƒÉspunsul", use_container_width=True):
        st.session_state.total += 1
        correct = st.session_state.items[idx]["is_phish"]
        
        if correct:
            st.session_state.score += 1
            st.success("‚úÖ Corect! Ai identificat corect mesajul de phishing.")
        else:
            st.error("‚ùå Gre»ôit! Acesta nu era mesajul de phishing.")
        
        # Afi»ôƒÉm explica»õia
        st.markdown(f"**Explica»õie:** {st.session_state.current_example['explanation']}")
        
        # Afi»ôƒÉm care era rƒÉspunsul corect
        correct_idx = next((i for i, item in enumerate(st.session_state.items) if item["is_phish"]), None)
        st.info(f"RƒÉspunsul corect era: Mesaj #{correct_idx + 1}")
        
        # Eviden»õiem elementele de phishing
        phish_text = st.session_state.items[correct_idx]["text"]
        
        st.subheader("AnalizƒÉ detaliatƒÉ a mesajului de phishing:")
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Semne de phishing:**")
            signs = []
            
            # VerificƒÉm subiectul »ôi corpul
            if "URGENT" in phish_text or "urgent" in phish_text.lower() or "imediat" in phish_text.lower():
                signs.append("Ton de urgen»õƒÉ")
            
            if "http://" in phish_text or "bit.ly" in phish_text:
                signs.append("Link-uri suspecte")
            
            if "card" in phish_text.lower() or "parola" in phish_text.lower() or "date" in phish_text.lower():
                signs.append("Solicitare de date personale")
            
            if len(signs) == 0:
                signs.append("VerificƒÉ tonul general »ôi contextul mesajului")
            
            for sign in signs:
                st.markdown(f"- {sign}")
        
        with col2:
            st.markdown("**Cum sƒÉ verifici legitimitatea:**")
            st.markdown("""
            - VerificƒÉ adresa expeditorului
            - Nu da click pe link-uri suspecte
            - ContacteazƒÉ direct compania prin canalele oficiale
            - Nu furniza date personale prin email
            - VerificƒÉ gre»ôelile gramaticale »ôi tonul
            """)

# Informa»õii educa»õionale √Æn partea de jos
with st.expander("Sfaturi pentru detectarea phishing-ului"):
    st.markdown("""
    ### Cum sƒÉ recuno»ôti un email de phishing:
    
    1. **VerificƒÉ adresa expeditorului** - Adresele de email care imitƒÉ companii legitime adesea con»õin gre»ôeli sau domenii ciudate
    2. **Fii atent la tonul urgent** - Mesajele care creeazƒÉ un sentiment de urgen»õƒÉ sunt adesea phishing
    3. **VerificƒÉ link-urile** - PlaseazƒÉ cursorul peste link (fƒÉrƒÉ a da click) pentru a vedea URL-ul real
    4. **Fii prudent cu ata»ôamentele** - Nu deschide ata»ôamente nea»ôteptate
    5. **ObservƒÉ gre»ôelile gramaticale** - ComunicƒÉrile profesionale rareori con»õin multe gre»ôeli
    6. **VerificƒÉ modul de adresare** - Mesajele generice ("DragƒÉ client") pot fi suspecte
    7. **Nu oferi informa»õii personale** - Companiile legitime nu cer date sensibile prin email
    """)

with st.expander("Despre func»õionalitatea AI"):
    st.markdown("""
    ### Cum func»õioneazƒÉ generarea cu AI:
    
    Aplica»õia folose»ôte un model de limbaj pentru a genera douƒÉ tipuri de emailuri:
    
    1. **Email-uri legitime** - RespectƒÉ toate regulile de comunicare profesionalƒÉ
    2. **Email-uri de phishing** - Con»õin inten»õionat indicatori de phishing
    
    Generarea cu AI permite crearea de exemple diverse »ôi actualizate, fƒÉc√¢nd antrenamentul mai eficient.
    
    Toate emailurile sunt generate doar √Æn scop educa»õional »ôi nu reprezintƒÉ comunicƒÉri reale.
    """)

with st.expander("Despre acest proiect"):
    st.markdown("""
    Acest quiz educa»õional a fost creat pentru a ajuta utilizatorii sƒÉ recunoascƒÉ diverse tipuri de atacuri de phishing. 
    
    Aplica»õia nu colecteazƒÉ, stocheazƒÉ sau proceseazƒÉ niciun fel de date personale.
    
    Toate exemplele sunt create √Æn scop educa»õional »ôi nu reprezintƒÉ comunicƒÉri reale.
    
    ### Tehnologii folosite:
    - Frontend: Streamlit
    - Generare con»õinut: Modele de limbaj
    - Hosting: Streamlit Community Cloud
    
    DacƒÉ dore»ôti sƒÉ contribui cu exemple noi sau sƒÉ raportezi probleme, lasƒÉ un comentariu mai jos.
    """)
    
    feedback = st.text_area("Feedback sau sugestii:")
    if st.button("Trimite feedback"):
        st.success("Mul»õumim pentru feedback! Vom lua √Æn considerare sugestiile tale pentru versiunile viitoare.")

# Footer
st.markdown("---")
st.markdown("¬© 2025 Vaccin Anti-Phishing | Creat √Æn scop educa»õional")
